https://leetcode.com/problems/reverse-pairs/description/

1. binary indexed tree(BIT)

class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int res = 0;
        vector<int> copy(nums);
        vector<int> bit(copy.size() + 1, 0);
        
        sort(copy.begin(), copy.end());
        
        for (int i = 0; i < nums.size(); i++) {
            res += search(bit, index(copy, nums[i] * 2L + 1));
            insert(bit, index(copy, nums[i]));
        }
        
        return res;
    }
    
private:
    int search(vector<int> &bit, int i) {
        int sum = 0;
        while (i < bit.size()) {
            sum += bit[i];
            i += i & (-i);
        }
        
        return sum;
    }
    
    void insert(vector<int> &bit, int i) {
        while (i > 0) {
            bit[i]++;
            i -= i & (-i);
        }
    }
    
    int index(vector<int> &arr, long long val) {
        int mid, l = 0, r = arr.size() - 1;
        
        while (l <= r) {
            mid = (l + r) >> 1;
            if (val <= arr[mid])
                r = mid - 1;
            else
                l = mid + 1;
        }
        
        return l + 1;       // this will return index of the first element not less than the assigned value, shifted up by 1 for BIT
    }
};

comment:
1. Maintain a BIT to record the number of elements no less than some value. For every element in BIT, the number is in fact the sum of
   elements positioned right to the current element in the current sorted array(imagine that the array is dynamic and elements continously inserted within
   that) including element itself.
2. Insertion would change the records in BIT, and searching would find the number of elements greater than twice of next element.
3. The principle behind that is sequential recurrence.

2. MergeSort

class Solution {
public:
    int reversePairs(vector<int>& nums) {
        return mergeAndCount(nums, 0, nums.size() - 1);
    }
    
private:
    int mergeAndCount(vector<int>& nums, int lo, int hi) {
        if (lo >= hi) 
            return 0;
        
        int mid = (lo + hi) >> 1, i = lo, j = mid + 1, p = mid + 1, k = 0;
        int res = mergeAndCount(nums, lo, mid) + mergeAndCount(nums, mid + 1, hi);
        vector<int> merge(hi - lo + 1);
        
        while (i <= mid) {
            while (p <= hi && nums[i] > nums[p] * 2L)
                p++;
            res += p - mid - 1;
            while (j <= hi && nums[i] >= nums[j]) 
                merge[k++] = nums[j++];
            merge[k++] = nums[i++];
        }
        
        while (j <= hi)
            merge[k++] = nums[j++];
        
        k = 0;
        while (k < hi - lo + 1) 
            nums[lo + k] = merge[k++];
        
        return res;
    }
};

comment:
1. The partition recurrence relationship is T(lo, hi) = T(lo, mid) + T(mid + 1, hi) + C.
2. Use the mergesort to sort two subarray, and then merge two subarrays while outer loop of i of former subarray increases i by 1,
   after the inner loop of j to check if latter subarray contains any elements not greater than that of the first subarray and put
   them into the merged sorted array, while could be written into more concise shape. When i incremented, check whether i is larger
   than the twice of element[j], for every i, the elements range from mid + 1 to p - 1 which pointed when in last i loop is definitely
   less than current value of element[i], for ascending order of subarray. Hencefore the total running of p is linear time complexities.

3. BBST
