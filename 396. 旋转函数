思路：递推公式

F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]
F(k-1) = 0 * Bk-1[0] + 1 * Bk-1[1] + ... + (n-1) * Bk-1[n-1]
       = 0 * Bk[1] + 1 * Bk[2] + ... + (n-2) * Bk[n-1] + (n-1) * Bk[0]
Then,

F(k) - F(k-1) = Bk[1] + Bk[2] + ... + Bk[n-1] + (1-n)Bk[0]
              = (Bk[0] + ... + Bk[n-1]) - nBk[0]
              = sum - nBk[0]
Thus,

F(k) = F(k-1) + sum - nBk[0]

https://leetcode-cn.com/problems/rotate-function/submissions/

class Solution {
    public int maxRotateFunction(int[] A) {
        int sum = 0, F = 0, n = A.length, B0;
        for (int i = 0; i < A.length; i++) {
            sum += A[i];
            F += i * A[i];
        }
        
        int max = F;
        for (int i = 1; i < n; i++) {
            B0 = A[n - i];
            F = F + sum - n * B0;
            max = Math.max(max, F);
        }
        
        return max;
    }
}
