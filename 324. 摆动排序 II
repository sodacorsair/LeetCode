思路：如果要达到平均O(n)的时间复杂度和O(1)的空间复杂度会用到很多算法。
首先需要该序列的中位数（使用K选择算法选择第(1+len)/2位），之后将大于中位数的数字插入左边开始的奇数位，将小于中位数的数字插入右边开始的偶数位，此时剩下
的中位数插入剩余的位置，实际上这是一个荷兰国旗问题的变种，利用trick: newIndex = (1 + 2 * i) % (n | 1)可以将数组前半部分序列映射为奇数位，将后半部分
映射为偶数位，扫描的左指针从左边开始，实际上通过映射（也叫做函数），输入坐标x，得到映射后的y，通过比较映射后的坐标对应数组数字，此时左指针保证指针左边
大于中位数，中指针保证指针左边大于等于中位数，右指针保证指针右边小于中位数，当右指针刚好大于中指针扫描就完事了。

https://leetcode-cn.com/problems/wiggle-sort-ii/

class Solution {
    public void wiggleSort(int[] nums) {
        int n = nums.length;
        int median = findKthLargest(nums, (n + 1) / 2);
        System.out.println("median: " + median);
        int left = 0, i = 0, right = n - 1;
        while (i <= right) {
            if (nums[newIndex(i, n)] < median)
                swap(nums, newIndex(right--, n), newIndex(i, n));
            else if (nums[newIndex(i, n)] > median)
                swap(nums, newIndex(left++, n), newIndex(i++, n));
            else
                i++;
        }
    }
    
    private int newIndex(int index, int n) {
        return (1 + 2 * index) % (n | 1);
    }
    
    private int findKthLargest(int[] nums, int k) {
        int start = 0, end = nums.length - 1, index = nums.length - k;
        while (start < end) {
            int pivot = partition(nums, start, end);
            if (pivot > index) end = pivot - 1;
            else if (pivot < index) start = pivot + 1;
            else return nums[pivot];
        }
        return nums[start];
    }
    
    private int partition(int[] nums, int start, int end) {
        int pivot = start;
        while (start <= end) {
            while (start <= end && nums[start] <= nums[pivot]) start++;
            while (start <= end && nums[end] > nums[pivot]) end--;
            if (start > end) break;
            swap(nums, start, end);
        }
        swap(nums, end, pivot);
        return end;
    }
    
    private void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}
