https://leetcode-cn.com/problems/maximum-width-ramp/submissions/

以单调递减栈为例，假设单调栈元素s[i]存储的是数组索引，单调栈的种类有两个：

在一个数组上从下标0开始从左到右遍历，若元素e小于栈顶元素压入，对于栈中元素s[i]而言，s[i]为区间[0, s[i + 1])的极小值的索引；
在一个数组上从下标0开始从左到右遍历，若元素e大于等于栈顶元素则将栈顶元素弹出直到e小于栈顶元素再入栈，s[i]为区间(s[i - 1], pos]的极大值的索引，pos为当
前遍历位置。

单调递增栈同理可推。
对于本题而言，可转化为对于每个下标i，找到小于A[i]并且离i最远的值，则应该选择第一种单调栈，不断弹栈直到找到第一个大于A[i]的索引s[j - 1]，由上述性质可知
此时右边的s[j]最靠左并且小于等于A[i]的索引，s[j]的左边区间不会存在比它还小的值来代替成为最远的值。
在#901中寻找股票价格最大跨度，实质是对于下标i，找到一个全体小于等于A[i]并且要求最长的左边相邻区间，这时应选用第二种单调栈。弹栈直到找到第一个大于A[i]的
索引s[j - 1]，此时右边的s[j]是小于等于A[i]并且保证(s[j - 1], i]均满足其性质的索引。

class Solution {
    public int maxWidthRamp(int[] A) {
        Stack<Integer> stack = new Stack();
        for (int i = 0; i < A.length; i++)
            if (stack.isEmpty() || A[stack.peek()] > A[i])
                stack.push(i);
        
        int slope = 0;
        for (int i = A.length - 1; i >= 0; i--) {
            int tmp = i;
            while (!stack.isEmpty() && A[stack.peek()] <= A[i])
                tmp = stack.pop();
            slope = Math.max(slope, i - stack.pop());
        }
        
        return slope;
    }
}
