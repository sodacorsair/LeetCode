1. my solution
class Solution {
public:
    bool isNumber(string s) {
    // dot == if dot exists  symbol == if number appears after e  e == if e exists  num == if there's digit
    // space == if there's any space
        int dot = 0, symbol = 0, e = 0, num = 0, space = 0;
        const char *foo = s.data();
        while (foo[0] == ' ')
            s.erase(0, 1);
        
        for (int i = 0; i < s.size(); i++) {
            if (foo[i] == '+' || foo[i] == '-') {
                if (i != 0 && foo[i - 1] != 'e') {
                    return false;
                }
            } else if (foo[i] == '.') {
                dot++;
                if (dot == 2)
                    return false;
                if (e > 0)
                    return false;
                if (space)
                    return false;
            } else if (foo[i] == 'e') {
                e++;
                if (dot > 0)
                    dot--;
                if (symbol > 0)
                    symbol--;
                if (e == 2 || !num)
                    return false;
            } else if (foo[i] >= '0' && foo[i] <= '9') {
                num = 1;
                if (e) {
                    symbol = 1;
                }
                if (space)
                    return false;
            } else if (foo[i] == ' ') {
                space = 1;  
            } else {
                return false;
            }
        }
        
        return num && (e && symbol || !e);
    }
};


2. deterministic finite automaton
class Solution {
public:
    bool isNumber(string str) {
        int state = 0, flag = 0;
        while (str[0] == ' ') str.erase(0, 1);
        while (str[str.size() - 1] == ' ') str.erase(str.size() - 1, 1);
        if (0 == str.size()) return false;
        for (int i = 0; i < str.size(); i++) {
            if ('9' >= str[i] && '0' <= str[i]) {
                if (state <= 2) state = 2;
                else if (8 == state) state = 6;
                else state = (state <= 5) ? 5 : 7;
            } else if ('+' == str[i] || '-' == str[i]) {
                if (0 == state) state = 1;
                else if (3 == state) state = 4;
                else return false;
            } else if ('.' == str[i]) {
                if (state == 2) state = 6;
                else if (state < 2) state = 8;
                else return false;
            } else if ('e' == str[i]) {
                if (2 == state || 6 == state || 7 == state)
                    state = 3;
                else 
                    return false;
            } else {
                return false;
            }
        }
        
        return 2 == state || 5 == state || 6 == state || 7 == state;
    }
};

comment: there's totoally 8 states. The transimitting diagram of states are shown as below:


                                                  digit
                                         -----------------------
                                         |                     |
             digit                 exp   |   +/-       digit   v
     -----------------------    ------->s3-------->s4-------->(s5)
    |                      |    |        ^                      ^ |
    |   +/-       digit    v    |        |-----------------     | |  digit
    s0-------->s1-------->(s2)--=          |exp           |exp   -
    |          |           ^ |  |          |              | 
 dot|      dot |     digit | |  |   dot    |     digit    |
    |          v            -   --------->(s6)--------->(s7)
    --------->s8                            ^            ^ |  
               |          digit             |      digit | |  
               ------------------------------             - 
    
    
    
    states with brackets around like s2, s5, s6, s7 are final state.
    
    
    
    
    
    
