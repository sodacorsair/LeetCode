思路：在无向无环图中，直径为所有两点最小距离的最大值，从任意一个点出发进行bfs最后的一个点是直径的一个端点，再从该端点进行bfs得到另一个端点。取该直径的
中点即是最小高度树的根。（话说我看多邓俊辉的书，怎么会想到Floyd-Warshall那边去……）

https://leetcode-cn.com/problems/minimum-height-trees/submissions/

class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<List<Integer>> adj = new ArrayList();
        int[] visited = new int[n], parents = new int[n];
        for (int i = 0; i < n; i++) adj.add(new ArrayList());
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        
        Queue<Integer> queue = new LinkedList();
        queue.offer(0);
        visited[0] = 1;
        int last = 0;
        while (!queue.isEmpty()) {
            last = queue.poll();
            for (int a : adj.get(last)) 
                if (visited[a] == 0) {
                    visited[a] = 1;
                    queue.offer(a);
                }
        }
        
        visited = new int[n];
        Queue<int[]> finder = new LinkedList();
        finder.offer(new int[]{last, 1});
        visited[last] = 1;
        int[] tmp = {last, 1};
        while (!finder.isEmpty()) {
            tmp = finder.poll();
            for (int a : adj.get(tmp[0]))
                if (visited[a] == 0) {
                    visited[a] = 1;
                    parents[a] = tmp[0];
                    finder.offer(new int[]{a, tmp[1] + 1});
                }
        }
        
        int size = tmp[1];
        last = tmp[0];
        for (int i = 1; i < size / 2; i++)
            last = parents[last];
            
        
        List<Integer> ans = new ArrayList();
        if (size % 2 == 0) ans.add(last);
        ans.add(parents[last]);
        return ans;
    }
}
