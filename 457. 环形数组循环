https://leetcode-cn.com/problems/circular-array-loop/submissions/

class Solution {
    
    public int advance(int[] nums, int i) {
        i += nums[i];
        // 测试案例太坑了，如果i < -nums.length，需要先求余再加nums.length
        return i >= nums.length ? i % nums.length : (i < 0 ? i % nums.length + nums.length : i);
    }
    
    public boolean circularArrayLoop(int[] nums) {
    // in case of bad input
        if (nums == null || nums.length < 2) return false;
        
        for (int i = 0; i < nums.length; i++) {
        // 0全跳
            if (nums[i] == 0) continue;
            // fast移动到下一位置
            int slow = i, fast = advance(nums, slow);
            
            // 每回nums[i]都跟fast,fast再fast的位置比较符号，以防止异向移动
            while (nums[i] * nums[fast] > 0 && 
                   nums[i] * nums[advance(nums, fast)] > 0) {
                if (fast == slow) {
                // 只隔一个元素不可以
                    if (slow == advance(nums, slow)) break;
                    return true;
                }
                slow = advance(nums, slow);
                fast = advance(nums, advance(nums, fast));
            }
            
            slow = i;
            // 由于异向已跳出，所以将同向的置为0，这些点已探测过不可能有环路，以防下次中招。
            while (nums[i] * nums[slow] > 0) {
                int tmp = slow;
                slow = advance(nums, slow);
                nums[tmp] = 0;
            }
        }
        
        return false;
    }
}
