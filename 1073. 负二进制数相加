关键：将两个数列进行相加，对于低位i和高位i+1，若a[i] >= 2, a[i+1] >= 1,则有2 * (-2)^(i) + (-2)^(i + 1) = 0，将a[i]减去2，a[i+1]减去1；若a[i] >= 2,
a[i+1] = 0，则有2 * (-2)^(i) = (-2)^(i+2) + (-2)^(i+1)，则a[i]减去2，a[i+1]和a[i+2]分别加1，直至a[i] <= 1；依此类推。

https://leetcode-cn.com/problems/adding-two-negabinary-numbers/submissions/

class Solution {
    public int[] addNegabinary(int[] arr1, int[] arr2) {
        ArrayList<Integer> ar1 = new ArrayList(), ar2 = new ArrayList();
        for (int a : arr1) {
            ar1.add(a);
        }
        for (int a : arr2) {
            ar2.add(a);
        }
        
        Collections.reverse(ar1);
        Collections.reverse(ar2);
        
        int maxLen = 5 + Math.max(ar1.size(), ar2.size());
        for (int i = ar1.size(); i < maxLen; i++) {
            ar1.add(0);
        }
        for (int i = ar2.size(); i < maxLen; i++) {
            ar2.add(0);
        }
        
        for (int i = 0; i < maxLen; i++) {
            ar1.set(i, ar1.get(i) + ar2.get(i));
        }
        
        for (int i = 0; i < maxLen; i++) {
            while (ar1.get(i) >= 2 && ar1.get(i + 1) >= 1) {
                ar1.set(i, ar1.get(i) - 2);
                ar1.set(i + 1, ar1.get(i + 1) - 1);
            }
            while (ar1.get(i) >= 2) {
                ar1.set(i, ar1.get(i) - 2);
                ar1.set(i + 1, ar1.get(i + 1) + 1);
                ar1.set(i + 2, ar1.get(i + 2) + 1);
            }
        }
        
        while (ar1.size() > 1 && ar1.get(ar1.size() - 1) == 0) {
            ar1.remove(ar1.size() - 1);
        }
        
        int[] answer = new int[ar1.size()];
        for (int i = 0; i < ar1.size(); i++) {
            answer[i] = ar1.get(ar1.size() - i - 1);
        }
        
        return answer;
    }
}
