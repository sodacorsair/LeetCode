https://leetcode.com/problems/strong-password-checker/description/

class Solution {
public:
    int strongPasswordChecker(string s) {
    // addTarget: the number of digit needed to be 6
    // deleteTarget: the number of digit needed to delete to be 20
        int addTarget = max(0, 6 - (int)s.size()), deleteTarget = max(0, (int)s.size() - 20);
        int toAdd = 0, toDelete = 0, toReplace = 0, needUpper = 1, needLower = 1, needDigit = 1;
        
        for (int l = 0, r = 0; r < s.size(); r++) {
            if (isupper(s[r])) needUpper = 0;      // once satisfied certain condition, the corresponding indiction set to 0
            if (islower(s[r])) needLower = 0;      // so as not to count into changes
            if (isdigit(s[r])) needDigit = 0;
            
            if (r - l == 2) {                     // a checking window with scale of 3 
                if (s[r] == s[r - 1] && s[r - 1] == s[l]) {   // if
                    if (toAdd < addTarget) {            // if length not reaches 6, then add, otherwise replace
                        toAdd++;
                        l = r;
                    } else {
                        toReplace++;
                        l = r + 1;
                        };
                } else 
                    l++;                         // if the checking window doesn't contain a repetition, then slide into next unit.
            }
        }
        
        if (s.size() <= 20)
            return max(addTarget + toReplace, needUpper + needLower + needDigit);
            
            above: length <= 20
///////////////////////////////////////////////////////////////////////////////////////////////////////            
            below: length > 20
            
/* When length above 20 the tricky is doing "necessary deletion" to reduce replacement, and then compute number of replacing
   as well as the number of rest number to delete to meet the condition that length is 20.
*/   
        toReplace = 0;                  
        vector<unordered_map<int, int>> lenCounts(3);    // lenCounts[length of repetition % 3](map)[length of repetition][number]
        for (int l = 0, r = 0, len; r <= s.size(); r++) {      // construct hash map
            if (r == s.size() || s[l] != s[r]) {
                if ((len = r - l) > 2) {
                    lenCounts[len % 3][len]++;
                } 
                l = r;
            }
        }
        
        for (int i = 0, dec = 0, numOfLetter = 0; i < 3; i++) {        // traverse
            for (auto it = lenCounts[i].begin(); it != lenCounts[i].end(); it++) {
                if (i < 2) {                  // if len % 3 = 0 or 1, 
                    numOfLetter = i + 1;
                    dec = min(it->second, (deleteTarget - toDelete) / numOfLetter);
                    toDelete += dec * numOfLetter;
                    it->second -= dec;

                    if (it->first - numOfLetter > 2)
                        lenCounts[2][it->first - numOfLetter] += dec;
                    }
                
                toReplace += it->first / 3 * it->second;
            }
        }
        
        int dec = (deleteTarget - toDelete) / 3;
        toReplace -= dec;
        // toDelete += dec * 3;
        return deleteTarget + max(toReplace, needUpper + needLower + needDigit);
    }
};

